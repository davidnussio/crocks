(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{101:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return h}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(t),b=a,h=u["".concat(i,".").concat(b)]||u[b]||m[b]||o;return t?r.a.createElement(h,c(c({ref:n},s),{},{components:t})):r.a.createElement(h,c({ref:n},s))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=b;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t(2),r=t(6),o=(t(0),t(101)),i={title:"Equiv",description:"Equiv Crock",layout:"guide",weight:50},c={unversionedId:"crocks/Equiv",id:"crocks/Equiv",isDocsHomePage:!1,title:"Equiv",description:"Equiv Crock",source:"@site/docs/crocks/Equiv.md",slug:"/crocks/Equiv",permalink:"/docs/crocks/Equiv",editUrl:"https://github.com/evilsoft/crocks/edit/master/docs/docs/crocks/Equiv.md",version:"current",sidebar:"sidebar",previous:{title:"Either",permalink:"/docs/crocks/Either"},next:{title:"Identity",permalink:"/docs/crocks/Identity"}},l=[{value:"Implements",id:"implements",children:[]},{value:"Construction",id:"construction",children:[]},{value:"Constructor Methods",id:"constructor-methods",children:[{value:"empty",id:"empty",children:[]}]},{value:"Instance Methods",id:"instance-methods",children:[{value:"concat",id:"concat",children:[]},{value:"contramap",id:"contramap",children:[]},{value:"valueOf",id:"valueof",children:[]},{value:"compareWith",id:"comparewith",children:[]}]}],s={rightToc:l};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-haskell"}),"Equiv a a Boolean\n")),Object(o.b)("p",null,"Defined as a Monoidal Contravariant datatype, ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," can be used to test\nequivalence between two values of a given type. It does this by wrapping a\nbinary equivalence function of the form ",Object(o.b)("inlineCode",{parentName:"p"},"(a, a) -> Boolean"),". Most of the time\nstrict equality is used, but other functions of the required form can provide\nsome powerful results."),Object(o.b)("p",null,"While the far right parameter is always fixed to ",Object(o.b)("inlineCode",{parentName:"p"},"Boolean")," it cannot be\nCovariant, but is Contravariant allowing both inputs to vary in their type.\n",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," is also a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../monoids/"}),Object(o.b)("inlineCode",{parentName:"a"},"Monoid"))," and will concat the results of two ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv"),"s\nunder logical conjunction, with it's empty value always returning ",Object(o.b)("inlineCode",{parentName:"p"},"true"),"."),Object(o.b)("p",null,"As ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," wraps a function, it is lazy and a given instance will not produce\na result until both arguments are satisfied. A given instance can be run by\ncalling the method ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#comparewith"}),Object(o.b)("inlineCode",{parentName:"a"},"compareWith")),", providing both values for\ncomparison."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Equiv from 'crocks/Equiv'\n\nimport equals from 'crocks/pointfree/equals'\n\n// toString :: a -> String\nconst toString =\n  x => x.toString()\n\n// length :: a -> Number\nconst length = x =>\n  x && x.length ? x.length : 0\n\n// eq :: Equiv a a\nconst eq =\n  Equiv(equals)\n\neq.contramap(toString)\n  .compareWith('123', 123)\n//=> true\n\neq.contramap(length)\n  .compareWith([ 1, 2, 3 ], [ 'a', 'b' ])\n//=> false\n")),Object(o.b)("h2",{id:"implements"},"Implements"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Semigroup"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Monoid"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Contravariant")),Object(o.b)("h2",{id:"construction"},"Construction"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-haskell"}),"Equiv :: ((a, a) -> Boolean)-> Equiv a a\n")),Object(o.b)("p",null,"The constructor for ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," is a unary function that takes a binary predicate\nfunction as its argument. The binary function's arguments should be the same\ntype, although a union of multiple types can be used."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," type is parameterized by the inputs, or domain, of the function it\nwas constructed with. If the function does not strictly return a ",Object(o.b)("inlineCode",{parentName:"p"},"Boolean"),", then\nthe underlying result will be coerced to a ",Object(o.b)("inlineCode",{parentName:"p"},"Boolean"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Equiv from 'crocks/Equiv'\n\n// samePartition :: (a -> b) -> (a, a) -> Boolean\nconst samePartition = fn => (x, y) =>\n  fn(x) === fn(y)\n\n// mod12 :: Integer -> Integer\nconst mod12 =\n  x => x % 12\n\n// Equiv Integer Integer\nEquiv(samePartition(mod12))\n//=> Equiv (Integer, Integer) -> Boolean\n")),Object(o.b)("h2",{id:"constructor-methods"},"Constructor Methods"),Object(o.b)("h3",{id:"empty"},"empty"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-haskell"}),"Equiv.empty :: () -> Equiv a a\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"empty")," provides the identity for the ",Object(o.b)("inlineCode",{parentName:"p"},"Monoid")," in that when the value it\nprovides is ",Object(o.b)("inlineCode",{parentName:"p"},"concat"),"ed to any other value, it will return the other value. In\nthe case of ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," the result of ",Object(o.b)("inlineCode",{parentName:"p"},"empty")," is an ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," that will always\nreturn ",Object(o.b)("inlineCode",{parentName:"p"},"true"),". ",Object(o.b)("inlineCode",{parentName:"p"},"empty")," is available on both the Constructor and the Instance\nfor convenience."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Equiv from 'crocks/Equiv'\n\nimport equals from 'crocks/pointfree/equals'\n\nconst eq =\n  Equiv(equals)\n\nconst empty =\n  Equiv.empty()\n\neq\n  .concat(empty)\n  .compareWith({ a: 32 }, { a: 32 })\n//=> true\n\nempty\n  .concat(eq)\n  .compareWith({ a: 32 }, { a: 32 })\n//=> true\n\nempty\n  .concat(eq)\n  .compareWith({ a: 32, b: 19 }, { a: 32 })\n//=> false\n")),Object(o.b)("h2",{id:"instance-methods"},"Instance Methods"),Object(o.b)("h3",{id:"concat"},"concat"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-haskell"}),"Equiv a a ~> Equiv a a -> Equiv a a\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"concat")," is used to combine two ",Object(o.b)("inlineCode",{parentName:"p"},"Semigroup"),"s of the same type under an operation\nspecified by the ",Object(o.b)("inlineCode",{parentName:"p"},"Semigroup"),". In the case of ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv"),", the results of\nboth ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv"),"s are combined under logical conjunction."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Equiv from 'crocks/Equiv'\n\nimport compareWith from 'crocks/pointfree/compareWith'\nimport equals from 'crocks/pointfree/equals'\nimport isSameType from 'crocks/predicates/isSameType'\nimport getPropOr from 'crocks/helpers/getPropOr'\n\n// objLength :: Object -> Number\nconst objLength =\n  x => Object.keys(x).length\n\n// eq :: Equiv a a\nconst eq =\n  Equiv(equals)\n\n// sameType :: Equiv a a\nconst sameType =\n  Equiv(isSameType)\n\n// sameType :: Equiv Object Object\nconst length =\n  eq.contramap(objLength)\n\n// sameType :: Equiv a a\nconst sameTypeProp = key =>\n  sameType.contramap(getPropOr(null, key))\n\n// run :: Equiv Object Object\nconst run = compareWith(\n  { a: 19, b: 'string' },\n  { a: 32, c: false }\n)\n\nrun(length)\n//=> true\n\nrun(sameTypeProp('a'))\n//=> true\n\nrun(sameTypeProp('b'))\n//=> false\n\nrun(\n  sameTypeProp('a')\n    .concat(length)\n)\n// true\n\nrun(\n  sameTypeProp('b')\n    .concat(length)\n)\n// false\n")),Object(o.b)("h3",{id:"contramap"},"contramap"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-haskell"}),"Equiv a a ~> (b -> a) -> Equiv b b\n")),Object(o.b)("p",null,"The far right parameter of ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," fixed to ",Object(o.b)("inlineCode",{parentName:"p"},"Boolean")," which means we cannot map\nthe value as expected. However the left two parameters can vary, although they\nmust vary in the same manner."),Object(o.b)("p",null,"This is where ",Object(o.b)("inlineCode",{parentName:"p"},"contramap")," comes into play as it can be used to adapt an ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," of\na given type to accept a different type or modify the value. Provide it a\nfunction that has a return type that matches the input types of the ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv"),".\nThis will return a new ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," matching the input type of the provided\nfunction."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Equiv from 'crocks/Equiv'\n\nimport equals from 'crocks/pointfree/equals'\n\n// length :: String -> Number\nconst length =\n  x => x.length\n\n// eq :: Equiv a a\nconst eq =\n  Equiv(equals)\n\n// sameLength :: Equiv String String\nconst sameLength =\n  eq.contramap(length)\n\n// sameAmplitude :: Equiv Float Float\nconst sameAmplitude =\n  eq.contramap(Math.abs)\n\nsameAmplitude\n  .compareWith(-0.5011, 0.5011)\n//=> true\n\nsameAmplitude\n  .compareWith(-0.755, 0.8023)\n//=> false\n\nsameLength\n  .compareWith('aBcD', '1234')\n//=> true\n\nsameLength\n  .compareWith('AB', 'ABC')\n//=> false\n")),Object(o.b)("h3",{id:"valueof"},"valueOf"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-haskell"}),"Equiv a a ~> () -> a -> a -> Boolean\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"valueOf")," is used on all ",Object(o.b)("inlineCode",{parentName:"p"},"crocks")," ",Object(o.b)("inlineCode",{parentName:"p"},"Monoid"),"s as a means of extraction. While the\nextraction is available, types that implement ",Object(o.b)("inlineCode",{parentName:"p"},"valueOf")," are not necessarily\na ",Object(o.b)("inlineCode",{parentName:"p"},"Comonad"),". This function is used primarily for convenience for some of the\nhelper functions that ship with ",Object(o.b)("inlineCode",{parentName:"p"},"crocks"),". Calling ",Object(o.b)("inlineCode",{parentName:"p"},"valueOf")," on\nan ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," instance will result in the underlying curried equivalence function."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Equiv from 'crocks/Equiv'\n\nimport compose from 'crocks/helpers/compose'\nimport equals from 'crocks/pointfree/equals'\nimport getPropOr from 'crocks/helpers/getPropOr'\n\n// toLower :: String -> String\nconst toLower =\n  x => x.toLowerCase()\n\n// length :: String -> String\nconst length =\n  x => x.length\n\n// lowerName :: Object -> String\nconst lowerName =\n  compose(toLower, getPropOr('', 'name'))\n\n// itemsLen :: Object -> Number\nconst itemsLen =\n  compose(length, getPropOr('', 'items'))\n\n// eq :: Equiv a a\nconst eq =\n  Equiv(equals)\n\n// checkName :: Equiv Object Object\nconst checkName =\n  eq.contramap(lowerName)\n\n// checkName :: Equiv Object Object\nconst checkItems =\n  eq.contramap(itemsLen)\n\n// test :: Object -> Object -> Boolean\nconst test =\n  checkName\n    .concat(checkItems)\n    .valueOf()\n\ntest(\n  { name: 'Bob', items: [ 1, 2, 4 ] },\n  { name: 'bOb', items: [ 9, 12, 9 ] }\n)\n//=> true\n")),Object(o.b)("h3",{id:"comparewith"},"compareWith"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-haskell"}),"Equiv a a ~> a -> a -> Boolean\n")),Object(o.b)("p",null,"As ",Object(o.b)("inlineCode",{parentName:"p"},"Equiv")," wraps a function, it needs a means to be run with two values for\ncomparison. Instances provide a curried method called ",Object(o.b)("inlineCode",{parentName:"p"},"compareWith")," that takes\ntwo values for comparison and will run them through the equivalence function,\nreturning the resulting ",Object(o.b)("inlineCode",{parentName:"p"},"Boolean"),"."),Object(o.b)("p",null,"Due to the laziness of this type, complicated comparisons can be built out from\ncombining and mapping smaller, simpler units of equivalence comparison."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Equiv from 'crocks/Equiv'\n\n// both :: Equiv Boolean Boolean\nconst both =\n  Equiv((x, y) => x && y)\n\n// isEven :: Number -> Boolean\nconst isEven =\n  x => x % 2 === 0\n\n// isBig :: Number -> Boolean\nconst isBig =\n  x => x > 10\n\n// bothEven :: Equiv Number Number\nconst bothEven =\n  both.contramap(isEven)\n\n// bothBig :: Equiv Number Number\nconst bothBig =\n  both.contramap(isBig)\n\nbothEven\n  .compareWith(12, 20)\n//=> true\n\nbothEven\n  .compareWith(17, 20)\n//=> false\n\nbothBig\n  .compareWith(17)(20)\n//=> true\n\nbothBig\n  .compareWith(7)(20)\n//=> false\n\nbothBig\n  .concat(bothEven)\n  .compareWith(8)(54)\n//=> false\n")))}p.isMDXComponent=!0}}]);