(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{100:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return O}));var a=t(0),i=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),p=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,O=d["".concat(r,".").concat(m)]||d[m]||s[m]||l;return t?i.a.createElement(O,o(o({ref:n},c),{},{components:t})):i.a.createElement(O,o({ref:n},c))}));function O(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=m;var o={};for(var b in n)hasOwnProperty.call(n,b)&&(o[b]=n[b]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<l;c++)r[c]=t[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},71:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return b})),t.d(n,"default",(function(){return p}));var a=t(2),i=t(6),l=(t(0),t(100)),r={description:"Predicate Functions API",layout:"notopic",title:"Predicate Functions",functions:["hasprop","hasprops","hasproppath","isalt","isalternative","isapplicative","isapply","isarray","isbifunctor","isboolean","iscategory","ischain","iscontravariant","isDate","isdefined","isempty","isextend","isfalse","isfalsy","isfoldable","isfunction","isfunctor","isinteger","isiterable","ismap","ismonad","ismonoid","isnil","isnumber","isobject","isplus","isprofunctor","ispromise","issame","issametype","issemigroup","issemigroupoid","issetoid","isstring","istraversable","istrue","istruthy","patheq","pathsatisfies","propeq","propsatisfies"],weight:40},o={unversionedId:"functions/predicate-functions",id:"functions/predicate-functions",isDocsHomePage:!1,title:"Predicate Functions",description:"Predicate Functions API",source:"@site/docs/functions/predicate-functions.md",slug:"/functions/predicate-functions",permalink:"/docs/functions/predicate-functions",editUrl:"https://github.com/evilsoft/crocks/edit/master/docs/docs/functions/predicate-functions.md",version:"current",sidebar:"sidebar",previous:{title:"Point-free Functions",permalink:"/docs/functions/pointfree-functions"},next:{title:"Transformation Functions",permalink:"/docs/functions/transformation-functions"}},b=[],c={rightToc:b};function p(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"All functions in this group have a signature of ",Object(l.b)("inlineCode",{parentName:"p"},"* -> Boolean")," and are used with\nthe many predicate based functions that ship with ",Object(l.b)("inlineCode",{parentName:"p"},"crocks"),",\nlike ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"helpers#safe"}),Object(l.b)("inlineCode",{parentName:"a"},"safe")),", ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"logic-functions#ifelse"}),Object(l.b)("inlineCode",{parentName:"a"},"ifElse"))," and ",Object(l.b)("inlineCode",{parentName:"p"},"filter")," to name a few. They also\nfit naturally with the ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../crocks/Pred"}),Object(l.b)("inlineCode",{parentName:"a"},"Pred"))," ADT. All predicate functions can be referenced\nfrom ",Object(l.b)("inlineCode",{parentName:"p"},"crocks/predicates"),"."),Object(l.b)("p",null,"Below is a list of all the current predicates that are included with a\ndescription of their truth:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"hasProp :: (String | Integer) -> a -> Boolean"),": an ",Object(l.b)("inlineCode",{parentName:"li"},"Array")," or ",Object(l.b)("inlineCode",{parentName:"li"},"Object")," that contains the provided index or key"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"hasProps :: Foldable f => f (String | Integer) -> a -> Boolean"),": an ",Object(l.b)("inlineCode",{parentName:"li"},"Array")," or ",Object(l.b)("inlineCode",{parentName:"li"},"Object")," that contains the provided indexs or keys"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"hasPropPath :: [ String | Integer ] -> a -> Boolean"),": an ",Object(l.b)("inlineCode",{parentName:"li"},"Array")," or ",Object(l.b)("inlineCode",{parentName:"li"},"Object")," that contains the provided index path"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isAlt :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"map")," and ",Object(l.b)("inlineCode",{parentName:"li"},"alt")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isAlternative :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"alt"),", ",Object(l.b)("inlineCode",{parentName:"li"},"zero"),", ",Object(l.b)("inlineCode",{parentName:"li"},"map"),", ",Object(l.b)("inlineCode",{parentName:"li"},"ap"),", ",Object(l.b)("inlineCode",{parentName:"li"},"chain")," and ",Object(l.b)("inlineCode",{parentName:"li"},"of"),"methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isApplicative :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"map"),", ",Object(l.b)("inlineCode",{parentName:"li"},"ap")," and ",Object(l.b)("inlineCode",{parentName:"li"},"of")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isApply :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"map")," and ",Object(l.b)("inlineCode",{parentName:"li"},"ap")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isArray :: a -> Boolean"),": Array"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isBifunctor :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"map")," and ",Object(l.b)("inlineCode",{parentName:"li"},"bimap")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isBoolean :: a -> Boolean"),": Boolean"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isCategory :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"id")," and ",Object(l.b)("inlineCode",{parentName:"li"},"compose")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isChain :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"map"),", ",Object(l.b)("inlineCode",{parentName:"li"},"ap")," and ",Object(l.b)("inlineCode",{parentName:"li"},"chain")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isContravariant :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"contramap")," method"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isDate :: a -> Boolean"),": Date"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isDefined :: a -> Boolean"),": Every value that is not ",Object(l.b)("inlineCode",{parentName:"li"},"undefined"),", ",Object(l.b)("inlineCode",{parentName:"li"},"null")," included"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isEmpty :: a -> Boolean"),": Empty Monoid, Object, Array, String, undefined, null, all Numbers and Boolean values"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isExtend :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"map")," and ",Object(l.b)("inlineCode",{parentName:"li"},"extend")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isFalse :: a -> Boolean"),": a value that is strictly equal to ",Object(l.b)("inlineCode",{parentName:"li"},"false")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isFalsy :: a -> Boolean"),": a value that is considered to be ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy"}),Object(l.b)("inlineCode",{parentName:"a"},"falsy"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isFoldable :: a -> Boolean"),": Array, List or any structure with a ",Object(l.b)("inlineCode",{parentName:"li"},"reduce")," method"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isFunction :: a -> Boolean"),": Function"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isFunctor :: a -> Boolean"),": an ADT that provides a ",Object(l.b)("inlineCode",{parentName:"li"},"map")," method"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isInteger :: a -> Boolean"),": Integer"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isIterable :: a -> Boolean"),": an ",Object(l.b)("inlineCode",{parentName:"li"},"Object")," with an ",Object(l.b)("inlineCode",{parentName:"li"},"iterator")," method"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isMap :: a -> Boolean"),": Map"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isMonad :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"map"),", ",Object(l.b)("inlineCode",{parentName:"li"},"ap"),", ",Object(l.b)("inlineCode",{parentName:"li"},"chain")," and ",Object(l.b)("inlineCode",{parentName:"li"},"of")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isMonoid :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"concat")," and ",Object(l.b)("inlineCode",{parentName:"li"},"empty")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isNil :: a -> Boolean"),": ",Object(l.b)("inlineCode",{parentName:"li"},"undefined")," or ",Object(l.b)("inlineCode",{parentName:"li"},"null")," or ",Object(l.b)("inlineCode",{parentName:"li"},"NaN")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isNumber :: a -> Boolean"),": ",Object(l.b)("inlineCode",{parentName:"li"},"Number")," that is not a ",Object(l.b)("inlineCode",{parentName:"li"},"NaN")," value, ",Object(l.b)("inlineCode",{parentName:"li"},"Infinity")," included"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isObject :: a -> Boolean"),": Plain Old JavaScript Object (POJO)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isPlus :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"map"),", ",Object(l.b)("inlineCode",{parentName:"li"},"alt")," and ",Object(l.b)("inlineCode",{parentName:"li"},"zero")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isProfunctor :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"map"),", ",Object(l.b)("inlineCode",{parentName:"li"},"contramap")," and ",Object(l.b)("inlineCode",{parentName:"li"},"promap")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isPromise :: a -> Boolean"),": an object implementing ",Object(l.b)("inlineCode",{parentName:"li"},"then")," and ",Object(l.b)("inlineCode",{parentName:"li"},"catch")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isSame :: a -> b -> Boolean"),": same value or reference, use ",Object(l.b)("inlineCode",{parentName:"li"},"equals")," for value equality"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isSameType :: a -> b -> Boolean"),": Constructor matches a values type, or two values types match"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isSemigroup :: a -> Boolean"),": an ADT that provides a ",Object(l.b)("inlineCode",{parentName:"li"},"concat")," method"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isSemigroupoid :: a -> Boolean"),": an ADT that provides a ",Object(l.b)("inlineCode",{parentName:"li"},"compose")," method"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isSetoid :: a -> Boolean"),": an ADT that provides an ",Object(l.b)("inlineCode",{parentName:"li"},"equals")," method"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isString :: a -> Boolean"),": String"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isSymbol :: a -> Boolean"),": Symbol"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isTraversable :: a -> Boolean"),": an ADT that provides ",Object(l.b)("inlineCode",{parentName:"li"},"map")," and ",Object(l.b)("inlineCode",{parentName:"li"},"traverse")," methods"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isTrue :: a -> Boolean"),": a value that is strictly equal to ",Object(l.b)("inlineCode",{parentName:"li"},"true")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"isTruthy :: a -> Boolean"),": a value that is considered to be ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Glossary/Truthy"}),Object(l.b)("inlineCode",{parentName:"a"},"truthy"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pathEq :: [ String | Integer ] -> a -> Object -> Boolean"),": an ",Object(l.b)("inlineCode",{parentName:"li"},"Object")," that contains the provided key in the  traversal path, with a value equal to the provided value. (equality by value)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pathSatisfies :: [ String | Integer ] -> ((a -> Boolean) | Pred) -> Object -> Boolean"),": an ",Object(l.b)("inlineCode",{parentName:"li"},"Object")," that contains the provided key in the traversal path with a value that passes the provided predicate."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"propEq :: (String | Integer) -> a -> Object -> Boolean"),": an ",Object(l.b)("inlineCode",{parentName:"li"},"Object")," that contains the provided key with a value equal to the provided value. (equality by value)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"propSatisfies :: (String | Integer) -> ((a -> Boolean) | Pred) -> Object -> Boolean"),": an ",Object(l.b)("inlineCode",{parentName:"li"},"Object")," that contains the provided key with a value that passes the provided predicate.")))}p.isMDXComponent=!0}}]);