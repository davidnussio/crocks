(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{101:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),p=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=p(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),b=p(t),u=r,m=b["".concat(i,".").concat(u)]||b[u]||s[u]||a;return t?o.a.createElement(m,c(c({ref:n},l),{},{components:t})):o.a.createElement(m,c({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var c={};for(var d in n)hasOwnProperty.call(n,d)&&(c[d]=n[d]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},67:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return d})),t.d(n,"default",(function(){return p}));var r=t(2),o=t(6),a=(t(0),t(101)),i={title:"Prod",description:"Prod Monoid",layout:"guide",weight:90},c={unversionedId:"monoids/Prod",id:"monoids/Prod",isDocsHomePage:!1,title:"Prod",description:"Prod Monoid",source:"@site/docs/monoids/Prod.md",slug:"/monoids/Prod",permalink:"/crocks/docs/monoids/Prod",editUrl:"https://github.com/evilsoft/crocks/edit/master/docs/docs/monoids/Prod.md",version:"current",sidebar:"sidebar",previous:{title:"Min",permalink:"/crocks/docs/monoids/Min"},next:{title:"Sum",permalink:"/crocks/docs/monoids/Sum"}},d=[{value:"Implements",id:"implements",children:[]},{value:"Construction",id:"construction",children:[]},{value:"Constructor Methods",id:"constructor-methods",children:[{value:"empty",id:"empty",children:[]}]},{value:"Instance Methods",id:"instance-methods",children:[{value:"equals",id:"equals",children:[]},{value:"concat",id:"concat",children:[]},{value:"valueOf",id:"valueof",children:[]}]}],l={rightToc:d};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-haskell"}),"Prod Number\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Prod")," is a ",Object(a.b)("inlineCode",{parentName:"p"},"Monoid")," that will combine (2) ",Object(a.b)("inlineCode",{parentName:"p"},"Number"),"s under multiplication."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Prod from 'crocks/Prod'\nimport compose from 'crocks/helpers/compose'\nimport concat from 'crocks/pointfree/concat'\n\nconst emptyProd = Prod.empty()\nconst tenProd = Prod(10)\nconst hundredProd = Prod(100)\n\nemptyProd\n  .concat(emptyProd)\n//=> Prod 1\n\ntenProd\n  .concat(hundredProd)\n//=> Prod 1000\n\n// prodBy2 :: Number -> Prod\nconst double =\n  compose(concat(Prod(2)), Prod)\n\ndouble(4)\n//=> Prod 8\n\ndouble(11)\n//=> Prod 22\n")),Object(a.b)("h2",{id:"implements"},"Implements"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Setoid"),", ",Object(a.b)("inlineCode",{parentName:"p"},"Semigroup"),", ",Object(a.b)("inlineCode",{parentName:"p"},"Monoid")),Object(a.b)("h2",{id:"construction"},"Construction"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-haskell"}),"Prod :: Number -> Prod Number\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Prod")," provides multiplication on ",Object(a.b)("inlineCode",{parentName:"p"},"Number"),"s and needs to be constructed with\na ",Object(a.b)("inlineCode",{parentName:"p"},"Number")," instance. Calling the constructor with a ",Object(a.b)("inlineCode",{parentName:"p"},"Number"),", results in a\nnew ",Object(a.b)("inlineCode",{parentName:"p"},"Prod")," that wraps the provided ",Object(a.b)("inlineCode",{parentName:"p"},"Number"),"."),Object(a.b)("p",null,"Passing ",Object(a.b)("inlineCode",{parentName:"p"},"undefined"),", ",Object(a.b)("inlineCode",{parentName:"p"},"NaN")," or ",Object(a.b)("inlineCode",{parentName:"p"},"null")," to the constructor will result in\nan ",Object(a.b)("inlineCode",{parentName:"p"},"empty")," instance, or an instance containing a ",Object(a.b)("inlineCode",{parentName:"p"},"1"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Prod from 'crocks/Prod'\n\nimport equals from 'crocks/pointfree/equals'\n\nProd(100)\n//=> Prod 100\n\nProd(-Infinity)\n//=> Prod -Infinity\n\nProd(undefined)\n//=> Prod 1\n\nequals(Prod(null), Prod.empty())\n//=> true\n")),Object(a.b)("h2",{id:"constructor-methods"},"Constructor Methods"),Object(a.b)("h3",{id:"empty"},"empty"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-haskell"}),"Prod.empty :: () -> Prod\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"empty")," provides the identity for the ",Object(a.b)("inlineCode",{parentName:"p"},"Monoid")," in that when the value it\nprovides is ",Object(a.b)("inlineCode",{parentName:"p"},"concat"),"ed to object other value, it will return the other value.\nIn the case of ",Object(a.b)("inlineCode",{parentName:"p"},"Prod")," the result of ",Object(a.b)("inlineCode",{parentName:"p"},"empty")," is ",Object(a.b)("inlineCode",{parentName:"p"},"1"),". ",Object(a.b)("inlineCode",{parentName:"p"},"empty")," is available on\nboth the Constructor and the Instance for convenience."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Prod from 'crocks/Prod'\n\nProd.empty()\n//=> Prod 1\n\nProd.empty()\n  .concat(Prod.empty())\n//=> Prod 1\n\nProd(4)\n  .concat(Prod.empty())\n//=> Prod 4\n\nProd.empty()\n  .concat(Prod(4))\n//=> Prod 4\n")),Object(a.b)("h2",{id:"instance-methods"},"Instance Methods"),Object(a.b)("h3",{id:"equals"},"equals"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-haskell"}),"Prod a ~> b -> Boolean\n")),Object(a.b)("p",null,"Used to compare the underlying values of (2) ",Object(a.b)("inlineCode",{parentName:"p"},"Prod")," instances for equality by\nvalue, ",Object(a.b)("inlineCode",{parentName:"p"},"equals")," takes any given argument and returns ",Object(a.b)("inlineCode",{parentName:"p"},"true")," if the passed argument\nis a ",Object(a.b)("inlineCode",{parentName:"p"},"Prod")," with an underlying value equal to the underlying value of\nthe ",Object(a.b)("inlineCode",{parentName:"p"},"Prod")," the method is being called on. If the passed argument is not\na ",Object(a.b)("inlineCode",{parentName:"p"},"Prod")," or the underlying values are not equal, ",Object(a.b)("inlineCode",{parentName:"p"},"equals")," will return ",Object(a.b)("inlineCode",{parentName:"p"},"false"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Prod from 'crocks/Prod'\n\nProd(5)\n  .equals(Prod(5))\n//=> true\n\nProd(25)\n  .equals(Prod(31))\n//=> false\n")),Object(a.b)("h3",{id:"concat"},"concat"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-haskell"}),"Prod ~> Prod -> Prod\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"concat")," is used to combine (2) ",Object(a.b)("inlineCode",{parentName:"p"},"Semigroup"),"s of the same type under an\noperation specified by the ",Object(a.b)("inlineCode",{parentName:"p"},"Semigroup"),". In the case of ",Object(a.b)("inlineCode",{parentName:"p"},"Prod"),", ",Object(a.b)("inlineCode",{parentName:"p"},"concat")," will\nmultiply the (2) ",Object(a.b)("inlineCode",{parentName:"p"},"Number"),"s."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Prod from 'crocks/Prod'\n\nProd(5)\n  .concat(Prod(4))\n//=> Prod 20\n\nProd(45)\n  .concat(Prod(32))\n//=> Prod 1440\n\nProd(1000)\n  .concat(Prod(Infinity))\n//=> Prod Infinity\n\nProd.empty()\n  .concat(Prod(3))\n//=> Prod 3\n")),Object(a.b)("h3",{id:"valueof"},"valueOf"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-haskell"}),"Prod ~> () -> Number\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"valueOf")," is used on all ",Object(a.b)("inlineCode",{parentName:"p"},"crocks")," ",Object(a.b)("inlineCode",{parentName:"p"},"Monoid"),"s as a means of extraction. While\nthe extraction is available, types that implement ",Object(a.b)("inlineCode",{parentName:"p"},"valueOf")," are not necessarily\na ",Object(a.b)("inlineCode",{parentName:"p"},"Comonad"),". This function is used primarily for convenience for some of the\nhelper functions that ship with ",Object(a.b)("inlineCode",{parentName:"p"},"crocks"),". Calling ",Object(a.b)("inlineCode",{parentName:"p"},"valueOf")," on\na ",Object(a.b)("inlineCode",{parentName:"p"},"Prod")," instance will result in the underlying ",Object(a.b)("inlineCode",{parentName:"p"},"Number"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:"runkit",runkit:!0}),"import Prod from 'crocks/Prod'\n\nProd.empty()\n  .valueOf()\n//=> 1\n\nProd(4)\n  .valueOf()\n//=> 4\n\nProd(34)\n  .concat(Prod(21))\n  .valueOf()\n//=> 714\n")))}p.isMDXComponent=!0}}]);